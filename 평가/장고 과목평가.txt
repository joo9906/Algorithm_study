웹 동작 방식
클라이언트 - 요청 / 웹, 앱
서버 - 응답 / 웹 서버, DB 서버

웹 프레임워크
도구를 활용하는 느낌
개발에 필요한 구조, 규칙, 라이브러리 제공

장고 사용 이유
1. 다양성
2. 확장성
3. 보안
4. 커뮤니티 지원 (스포티파이, 인스타, 드롭박스 등에서 활용)

가상환경
개념 : 하나의 컴퓨터 안에서 또 다른 독립된 파이썬 환경을 사용하기 위해 따로 가상환경을 만듬
       패키지의 이름이 같은 경우 충돌 발생 가능 / 충동 가능한 패키지들도 있음
주의사항
1. 가상환경에 들어가는게 아니라 on/off 개념. 현재 터미널에만 영향을 끼침
2. 프젝마다 별도의 가상 환경을 사용
3. 일반적으로 venv는 관련 프젝과 동일한 경로에 위치시킴(같은 레벨의 폴더)
4. venv는 gitignore에 작성되어 원격 저장소에 공유되지 않음 - venv 크기가 좀 있어서

** 크기 차이 : 함수<모듈<패키지<라이브러리<프레임워크 **

앱 생성 시 복수형 지정 권장
반드시 생성 후 등록해야 한다. (startapp 이후 settings에서 등록)

의존성
개념 : 하나의 SW가 동작하기 위해 필요로 하는 다른 SW나 라이브러리

의존성 패키지 : 프젝이 의존하는 개별 라이브러리들(pip들)
필요 이유
1. 패키지마다 버전 다름
2. 프젝이 커질수록 사용하는 패키지 개수가 늘어나므로 어떤 버전을 사용했는지 기록/공유 필수
3. 다른 pc나 팀원들이 같은 환경을 구성할 때 의존성 리스트(requ~)가 반드시 필요

디자인 패턴
개념 : sw설계에서 발생하는 문제를 해결하기 위한 일반적 해결책

MVC 디자인 패턴 = Model, View, Controller
앱 구조화하는 대표적 패턴(데이터, 사용자 인터페이스, 비즈니스 로직 분리)
view = template, Controller = View 라고 명칭 변경


프로젝트의 구조
1. settings.py - 제일 중요
    프로젝트의 모든 설정 관리
    DIRS에서 설정하면 원하는 templates에 파일을 새로 만드는 과정 필요 X(html파일)

2. urls.py
    요청 들어오는 URL에 따라 이에 해당하는 적절한 views 함수를 연결

3. init.py - 해당 폴더가 프로젝트임을 인식하도록 하는 파일을

4. asgi.py - 비동기식 웹 서버와 연결 관련

5. wsgi - 웹 서버와 연결 관련

6. manage.py - 상호작용하는 커맨드라인 유틸리티

앱 구조
1. admin.py - 관리자용 페이지 설정(superuser - admin.site.register(class))
2. models.py - DB와 관련된 모델 정의, MTV의 Model **
3. Views.py - HTTP요청을 처리하고 응답하는 파일, MTV의 V **
4. apps.py - 앱 정보 작성
5. test.py - 프젝 테스트 코드 작성
6. Templates - MTV의 T, 폴더명 반드시 고정 장고는 app/templates/ 까지를 기본 경로로 설정
               따라서 view 함수에서는 경로 작성시 이후 경로를 작성해야 함 **
               레이아웃과 화면 처리, 화면에 실제 나오는 애들(html)

요청
1. URL의 경로는 반드시 /로 끝나야 함. views 파일 땡겨오는거 잊지 말기
2. 매개변수 이름은 어지간하면 request로 고정
3. 흐름에 따라 url->view->template 순으로 작성하는게 좋음

참고
1. LTS-프레임워크나 라이브러리 등 sw에서 장기간 지원되는 안정적 버전 의미

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 월요일 내용 끝 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

DTL : template에서 조건, 반복, 변수 등의 프로그래밍적 기능을 제공하는 시스템
1. variable : render 함수의 세번쨰 인자로 딕셔너리 데이터 사용 {{data.~}} 이게 variable
2. filter : 표시할 변수 수정 시 사용 {{data|filter}}, filter에 lenght(data의 길이 표시) 같은 게 60 종류 들어감
3. tags : 반복 또는 논리 수행 {% if %} 같이 쓴다. 일부는 시작과 종료 태그 필요
4. comment : 주석 처리 {% comment %} {%endcomment %} 로 감싼다

템플릿 상속
base.html을 파일 자체의 templates에 만들어두고 거기서 꺼내 씀, 아니면 html들 모여있는데에 넣어도 되는듯?

form 태그
action
1. 입력 데이터가 전송 될 URL을 지정(views 아님. url로 보내는거임)
2. 이 속성을 지정 안하면 데이터는 현재 form이 있는 페이지의 url로 보내짐

method
1. 데이터를 어떤 방식으로 보낼 지 정의
2. 기본은 GET이고 생성, 수정, 삭제 시 POST로 보냄

input
1. 사용자의 데이터를 입력 받을 수 있는 요소, name에 작성된 이름으로 전송 됨

Query String Parameters
개념 : 사용자의 입력 데이터를 URL주소에 파라미터를 통해 서버로 보내는 방법
문자열은 &로 연결된 key = value로 구성, 기본 URL과는 ?로 구분됨
즉 www.naver.com?k=v&k=v... 이런 식으로 감

URL dispatcher
- URL 패턴을 정의하고 해당 패턴이 일치하는 요청을 처리할 view 함수 매핑

Variable routing
- URL 일부에 변수를 포함시키는 것
- <int,str...:abc> int가 path_converter, abc가 variable_name

App URL mapping
include 그거

url태그 사용 시 articles:index 로 사용하는데 여기서 articles가 app_name, index가 url의 name

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 2일차 끝 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

모델 필드 옵션
1. null : NULL 허용 여부
2. blank : 빈 값 허용 여부
3. default : 필드의 기본값 설정
4. auto_now_add=True : 생성 시 현재 시간 고정. 바뀌지 않음
5. auto_now=True: 수정될때마다 현재 시간 넣어줌

Admin 사용 시
from .models import class_name
admin.site.register(class_name) 으로 해야 들어갈 수 있음

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ3일차 끝 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

ORM : 객체 지향 프로그래밍 언어를 사용해 호환되지 않는 시스템 간의 데이터 변환 기술

QuerySet API
- ORM에서 데이터를 검색, 필터링, 정렬 및 그룹화 사용 도구
- API를 사용해 SQL 이 아닌 python 코드로 데이터 처리

구문
1. Class.objects.all()

Query : DB 특정 데이터 보여달라는 요청, 쿼리문 작성 파이썬-ORM-DB 이후 DB-ORM-QuerySet으로 전달

QuerySet : DB에서 전달 받은 객체 목록, Django ORM을 통해 만들어진 자료형, 단일 객체는 class 인스턴스로 반환

CRUD - sw가 가지는 기본적 데이터 처리 기능
1. Create
    1번 방법 : a = class() 이후 a.title='a' a.content='b' 이후 a.save()를 하는 방법
    2번 방법 : a = class(title='a', content='b') 이후 a.save()를 하는 방법
    3번 방법 : class.objects.create(title='a', content='b') 하는 방법 -> save 안해도 됨

2. Read
    a. all() - 싹다 긁어오는 것
    b. filter() - filter 조건에 맞는 것둘울 가져오는 것. filter(pk>3) 이라거나 filter(title='abc')
    c. get() - 조건에 맞는 객체 하나만 가져오기. pk로 주로 씀. 둘 이상은 에러-> 고유성 보장 조회

3. Update
    a = class.objects.get(pk=1)
    a.title = 'ab'
    a.save()
    이런 식으로 사용

4. Delete
    a = class.objects.get(pk=1)
    a.delete()

ORM, QuerySet API 사용 이유
1. 데이터베이스 추상화
2. 생산성 향상
3. 객체 지향적 접근

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 4일차 끝 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

HTTP
- 네트워크 상에서 데이터(리소스)를 주고 받기 위한 약속

HTTP request methods
- 데이터에 대해 수행을 원하는 작업을 나타내는 것
- 클라이언트가 웹 서버에 특정 동작을 요청하기 위해 사용하는 표준 명령어
- GET, POST

GET
- 조회에 사용

특징
1. 데이터 전송(쿼리문자열로 데이터 전송)
2. 데이터 제한(URL 길이에 제한이 있음)
3. 브라우저 히스토리(URL이 히스토리에 남음)
4. 캐싱 - 응답을 저장해두고 다시 들어갈 때 마다 저장된 결과 사용 -> 로딩시간 단축

POST
- 서버에 데이터 제출하여 리소스 변경에 사용

특징
1. 데이터 전송
2. 데이터 제한(GET에 비해 많은 양 전송 가능)
3. 브라우저 히스토리에 남지 않음
4. 캐싱 불가

403의 경우 csrf_token이 없어서 나오는 것. 보안의 일종